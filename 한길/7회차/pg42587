import java.util.*;
import java.util.stream.*;

class Solution {
    public int solution(int[] priorities, int location) {
        int answer = 0;

        //중요도가 큰 순서대로 리스트를 만든다. 포인터로 인덱스를 가리킨다.        
        int pointer = 0;
        List<Integer> list1 = Arrays.stream(priorities)
                                    .boxed() //boxed
                                    .sorted(Comparator.reverseOrder())
                                    .collect(Collectors.toList());
        //boxed()는 IntStream(원시 타입 스트림)을 Stream<Integer>(래퍼 객체 스트림)로 바꾸는 동작입니다. 이렇게 바꿔야 제네릭 컬렉션(List), 객체용 정렬(Comparator) 등을 쓸 수 있어요. by지피티

        //priorities의 인덱스를 queue에 차례로 담는다.
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < priorities.length; i++) {
            queue.offer(i);
        }

        while (!queue.isEmpty() && pointer < list1.size()) {
            //queue에서 꺼낸 priorities[currIndex]의 값이 list1의 0번째 값과 같으면 
            //프로세스가 실행(answer++) 아니면 다시 큐로 들어가.            
            int currIndex = queue.poll();
            if (priorities[currIndex] == list1.get(pointer)) {
                pointer++;
                answer++;
                if (currIndex == location) {
                    return answer;
                }
            } else {
                queue.offer(currIndex);
            }
        }

        return answer;
    }
}
